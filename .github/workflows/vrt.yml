name: Visual Regression Test

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      your_repo_github_token:
        description: e.g. secrets.GITHUB_TOKEN
        type: string
        required: true
      node_version:
        description: e.g. x.y.z
        type: string
        required: true
      snapshots_command:
        description: e.g. npm run snapshot
        type: string
        required: true
      snapshots_dirpath:
        description: e.g. test/vrt.e2e.ts-snapshots
        type: string
        required: true
      your_repo:
        description: e.g. org_name/repo_name
        type: string
        required: true
      head_sha:
        description: commit sha of the head branch
        type: string
        default: ""
      base_sha:
        description: commit sha of the base branch
        type: string
        required: true
      playwright_image_tag:
        description: e.g. v1.49.1-noble
        type: string
        required: true
      shard_count:
        description: append argument --shard=1/n to the snapshots_command
        type: number
        required: true
      force_update_base_snapshots:
        description: e.g. true or false
        type: boolean
        required: true

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      shard_indexes_json: ${{ steps.vars.outputs.shard_indexes_json }}
      vrt_diff_temp_branch: ${{ steps.vars.outputs.vrt_diff_temp_branch }}
      vrt_diff_dirname: ${{ steps.vars.outputs.vrt_diff_dirname }}
      vrt_diff_workspace: ${{ steps.vars.outputs.vrt_diff_workspace }}
      vrt_diff_base_branch: ${{ steps.vars.outputs.vrt_diff_base_branch }}
      required_base_snapshots: ${{ steps.checkouts.outputs.required_base_snapshots }}
    steps:
      - name: Setup variables
        run: |
          echo "shard_indexes_json=$(seq ${{ inputs.shard_count }} | jq -cs 'map("\(.)")')" > $GITHUB_OUTPUT
          echo "vrt_diff_temp_branch=diff" >> $GITHUB_OUTPUT
          echo "vrt_diff_dirname=diff" >> $GITHUB_OUTPUT
          echo "vrt_diff_workspace=.vrt-diff-${{ inputs.head_sha }}" >> $GITHUB_OUTPUT
          echo "vrt_diff_base_branch=snapshots/${{ inputs.your_repo }}/${{ inputs.base_sha }}" >> $GITHUB_OUTPUT
        id: vars
      - name: Clone vrt repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.vars.outputs.vrt_diff_base_branch }}
          path: ${{ steps.vars.outputs.vrt_diff_workspace }}
        continue-on-error: true
        id: base
      - name: Set required base snapshots on failure
        run: echo "required_base_snapshots=true" >> $GITHUB_OUTPUT
        if: steps.base.outcome == 'failure' || inputs.force_update_base_snapshots
        id: checkouts

  base:
    if: needs.init.outputs.required_base_snapshots
    needs: init
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:${{ inputs.playwright_image_tag }}
    env:
      GPR_READ_TOKEN: ${{ secrets.GPR_READ_TOKEN }}
    strategy:
      matrix:
        shard_index: ${{ fromJson(needs.init.outputs.shard_indexes_json) }}
        shard_total:
          - ${{ inputs.shard_count }}
    steps:
      - name: Set safe directory for permission on docker container
        run: git config --global --add safe.directory "$(pwd)"
      - name: Clone your repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.your_repo }}
          token: ${{ inputs.your_repo_github_token}}
          ref: ${{ inputs.base_sha }}
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
      - name: Restore node modules caches
        uses: actions/cache@v4
        with:
          key: node_modules_${{ hashFiles('package-lock.json', 'yarn.lock') }}
          path: node_modules
      - name: Install npm modules on base
        run: |
          if [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi
      - name: Take snapshots on base
        run: ${{ inputs.snapshots_command }} --shard ${{ matrix.shard_index }}/${{ matrix.shard_total }}
      - name: Upload base snapshots
        uses: actions/upload-artifact@v4
        with:
          name: base_snapshots_${{ matrix.shard_index }}
          path: ${{ inputs.snapshots_dirpath }}
          retention-days: 3
      - name: Upload test-results on failure for debug
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results
          retention-days: 3
        if: failure()

  commit_base:
    needs: [init, base]
    runs-on: ubuntu-latest
    steps:
      - name: Clone vrt repository
        uses: actions/checkout@v4
        with:
          path: ${{ needs.init.outputs.vrt_diff_workspace }}
      - name: Download base snapshots
        uses: actions/download-artifact@v4
        with:
          path: ${{ needs.init.outputs.vrt_diff_workspace }}/${{ needs.init.outputs.vrt_diff_dirname }}
          pattern: base_snapshots_*
          merge-multiple: true
      - name: Push vrt by base branch
        run: |
          cd ${{ needs.init.outputs.vrt_diff_workspace }}
          git config user.name  "GitHub Action"
          git config user.email "action@github.com"
          git checkout -b ${{ needs.init.outputs.vrt_diff_base_branch }}
          git add ${{ needs.init.outputs.vrt_diff_dirname }}
          git commit -m "Update screenshots [ci skip]"
          git push origin HEAD:${{ needs.init.outputs.vrt_diff_base_branch }} -f

  head:
    if: ${{ inputs.head_sha != '' && !cancelled() && !failure() }}
    needs: [init, commit_base]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:${{ inputs.playwright_image_tag }}
    env:
      GPR_READ_TOKEN: ${{ secrets.GPR_READ_TOKEN }}
    strategy:
      matrix:
        shard_index: ${{ fromJson(needs.init.outputs.shard_indexes_json) }}
        shard_total:
          - ${{ inputs.shard_count }}
    steps:
      - name: Set safe directory for permission on docker container
        run: git config --global --add safe.directory "$(pwd)"
      - name: Clone your repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.your_repo }}
          token: ${{ inputs.your_repo_github_token}}
          ref: ${{ inputs.head_sha }}
      - name: Clone vrt repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.init.outputs.vrt_diff_base_branch }}
          path: ${{ needs.init.outputs.vrt_diff_workspace }}
      - name: Copy base snapshots from vrt
        run: cp -r ${{ needs.init.outputs.vrt_diff_workspace }}/${{ needs.init.outputs.vrt_diff_dirname }} ${{ inputs.snapshots_dirpath }}
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
      - name: Restore node modules caches
        uses: actions/cache@v4
        with:
          key: node_modules_${{ hashFiles('package-lock.json', 'yarn.lock') }}
          path: node_modules
      - name: Install npm modules on head
        run: |
          if [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi
      - name: Mark timestamp before head snapshot
        run: touch /tmp/.before_snapshot_timestamp
      - name: Take snapshots on head
        run: ${{ inputs.snapshots_command }} --shard ${{ matrix.shard_index }}/${{ matrix.shard_total }}
      - name: Keep only updated snapshots for this shard
        run: find ${{ inputs.snapshots_dirpath }} -type f ! -newer /tmp/.before_snapshot_timestamp -exec rm -f {} +
      - name: Upload updated snapshots
        uses: actions/upload-artifact@v4
        with:
          name: updated_snapshots_${{ matrix.shard_index }}
          path: ${{ inputs.snapshots_dirpath }}
          retention-days: 3
      - name: Upload test-results on failure for debug
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results
          retention-days: 3
        if: failure()

  commit_head:
    if: ${{ inputs.head_sha != '' && !cancelled() && !failure() }}
    needs: [init, commit_base, head]
    runs-on: ubuntu-22.04
    steps:
      - name: Clone vrt repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.init.outputs.vrt_diff_base_branch }}
          path: ${{ needs.init.outputs.vrt_diff_workspace }}
      - name: Copy base snapshots for generate diff images
        run: cp -r ${{ needs.init.outputs.vrt_diff_workspace }}/${{ needs.init.outputs.vrt_diff_dirname }} /tmp/base
      - name: Remove existing snapshots directory
        run: rm -rf ${{ needs.init.outputs.vrt_diff_workspace }}/${{ needs.init.outputs.vrt_diff_dirname }}
      - name: Download updated snapshots
        uses: actions/download-artifact@v4
        with:
          path: ${{ needs.init.outputs.vrt_diff_workspace }}/${{ needs.init.outputs.vrt_diff_dirname }}
          pattern: updated_snapshots_*
          merge-multiple: true
      - name: Copy head snapshots for generate diff images
        run: cp -r ${{ needs.init.outputs.vrt_diff_workspace }}/${{ needs.init.outputs.vrt_diff_dirname }} /tmp/head
      - name: Push snapshots of head
        run: |
          cd ${{ needs.init.outputs.vrt_diff_workspace }}
          git config user.name  "GitHub Action"
          git config user.email "action@github.com"
          git add -A ${{ needs.init.outputs.vrt_diff_dirname }}
          if ! git diff --cached --quiet ${{ needs.init.outputs.vrt_diff_dirname }}
          then
            echo "added_count=$(git diff HEAD --diff-filter=A --name-only --no-renames | wc -l | xargs)" >> $GITHUB_OUTPUT
            echo "modified_count=$(git diff HEAD --diff-filter=M --name-only --no-renames | wc -l | xargs)" >> $GITHUB_OUTPUT
            echo "deleted_count=$(git diff HEAD --diff-filter=D --name-only --no-renames | wc -l | xargs)" >> $GITHUB_OUTPUT
            echo "base_commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            git commit -m "Update screenshots [ci skip]"
            git push origin HEAD:${{ needs.init.outputs.vrt_diff_temp_branch }} -f
            echo "head_commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "head_commit_url=https://github.com/${{ github.repository }}/commit/$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            git reset --hard HEAD~
          fi
        id: results
      - name: Fetch commit info
        if: steps.results.outputs.head_commit_url != ''
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ steps.results.outputs.head_commit_sha }}" \
            > /tmp/head_commit.json
          cat /tmp/head_commit.json

          jq \
            '[.files[] | {
              filepath: (.filename | sub("^diff/"; "")),
              status: .status,
              raw_url: .raw_url,
            }]' \
            < /tmp/head_commit.json \
            > /tmp/head_commit_files.json
          cat /tmp/head_commit_files.json
      - name: Generate diff images
        run: |
          mkdir -p /tmp/diff
          jq -r '.[] | select(.status == "modified") | .filepath' < /tmp/head_commit_files.json | while read -r filepath; do
            base_file="/tmp/base/${filepath}"
            head_file="/tmp/head/${filepath}"
            diff_file="/tmp/diff/${filepath}"
            mkdir -p "$(dirname "$diff_file")"
            compare "$base_file" "$head_file" "$diff_file" || [ $? -eq 1 ]
          done
      - name: Push snapshots of diff
        if: steps.results.outputs.head_commit_url != ''
        run: |
          cp -r /tmp/diff/. ${{ needs.init.outputs.vrt_diff_workspace }}/${{ needs.init.outputs.vrt_diff_dirname }}
          cd ${{ needs.init.outputs.vrt_diff_workspace }}
          git add -A ${{ needs.init.outputs.vrt_diff_dirname }}
          if ! git diff --cached --quiet ${{ needs.init.outputs.vrt_diff_dirname }}
          then
            git commit -m "Update screenshots [ci skip]"
            git push origin HEAD:${{ needs.init.outputs.vrt_diff_temp_branch }} -f
            echo "diff_commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi
        id: compare
      - name: Generate added images info
        if: steps.results.outputs.head_commit_url != ''
        run: |
          jq \
            '[.[] | select(.status == "added") | {
              filepath: .filepath,
              head_url: .raw_url,
            }]' \
            < /tmp/head_commit_files.json \
            > /tmp/added_images.json
          cat /tmp/added_images.json
      - name: Generate deleted images info
        if: steps.results.outputs.head_commit_url != ''
        run: |
          jq \
            --arg head_sha "${{ steps.results.outputs.head_commit_sha }}" \
            --arg base_sha "${{ steps.results.outputs.base_commit_sha }}" \
            '[.[] | select(.status == "removed") | {
              filepath: .filepath,
              base_url: (.raw_url | gsub($head_sha; $base_sha)),
            }]' \
            < /tmp/head_commit_files.json \
            > /tmp/deleted_images.json
          cat /tmp/deleted_images.json
      - name: Generate modified images info
        if: steps.results.outputs.head_commit_url != ''
        run: |
          jq \
            --arg head_sha "${{ steps.results.outputs.head_commit_sha }}" \
            --arg base_sha "${{ steps.results.outputs.base_commit_sha }}" \
            --arg diff_sha "${{ steps.compare.outputs.diff_commit_sha }}" \
            '[.[] | select(.status == "modified") | {
              filepath: .filepath,
              head_url: .raw_url,
              base_url: (.raw_url | gsub($head_sha; $base_sha)),
              diff_url: (.raw_url | gsub($head_sha; $diff_sha)),
            }]' \
            < /tmp/head_commit_files.json \
            > /tmp/modified_images.json
          cat /tmp/modified_images.json
      - name: Generate added content markdown
        if: steps.results.outputs.head_commit_url != ''
        run: |
          exec > /tmp/added_content.md
          echo "NOTICE: Renamed images are excluded."
          echo "<table>"
          jq -r '
            .[] | 
            "<tr><td>\(.filepath)</td></tr>\n" +
            "<tr><td><img alt=\"Added\" src=\"\(.head_url)\"></td></tr>\n"
          ' < /tmp/added_images.json
          echo "</table>"
          echo
      - name: Generate deleted content markdown
        if: steps.results.outputs.head_commit_url != ''
        run: |
          exec > /tmp/deleted_content.md
          echo "NOTICE: Renamed images are excluded."
          echo "<table>"
          jq -r '
            .[] | 
            "<tr><td>\(.filepath)</td></tr>\n" +
            "<tr><td><img alt=\"Delete\" src=\"\(.base_url)\"></td></tr>\n"
          ' < /tmp/deleted_images.json
          echo "</table>"
          echo
      - name: Generate modified content markdown
        if: steps.results.outputs.head_commit_url != ''
        run: |
          exec > /tmp/modified_content.md
          echo "<table>"
          jq -r '
            .[] |
            "<tr><td colspan=\"3\">\(.filepath)</td></tr>\n" +
            "<tr><td><img width=\"500\" alt=\"Before\" src=\"\(.base_url)\"></td>" +
            "<td><img width=\"500\" alt=\"After\" src=\"\(.head_url)\"></td>" +
            "<td><img width=\"500\" alt=\"Diff\" src=\"\(.diff_url)\"></td></tr>\n"
          ' < /tmp/modified_images.json
          echo "</table>"
          echo
      - name: Generate pull request comment
        run: |
          exec > /tmp/result_comment.md
          commit_url="${{ steps.results.outputs.head_commit_url }}"
          added_count="${{ steps.results.outputs.added_count }}"
          modified_count="${{ steps.results.outputs.modified_count }}"
          deleted_count="${{ steps.results.outputs.deleted_count }}"

          if [ "$commit_url" != "" ]; then
            echo "$commit_url"
            echo
            if [ "$modified_count" -gt 0 ]; then
              echo "<details><summary>Modified ⚠️ (<strong>${modified_count}</strong>)</summary>"
              echo
              cat /tmp/modified_content.md
              echo
              echo "</details>"
            fi
            if [ "$added_count" -gt 0 ]; then
              echo "<details><summary>Added ➕ (<strong>${added_count}</strong>)</summary>"
              echo
              cat /tmp/added_content.md
              echo
              echo "</details>"
            fi
            echo
            if [ "$deleted_count" -gt 0 ]; then
              echo "<details><summary>Deleted ➖ (<strong>${deleted_count}</strong>)</summary>"
              echo
              cat /tmp/deleted_content.md
              echo
              echo "</details>"
            fi
          else
            echo "✅ No change"
          fi
      - name: Generate modified images
        run: |
          mkdir -p /tmp/modified_images
          cp -r /tmp/diff /tmp/modified_images/
          jq -r '.[].filepath' < /tmp/modified_images.json | while read -r filepath; do
            base_file="/tmp/base/${filepath}"
            head_file="/tmp/head/${filepath}"
            before_file="/tmp/modified_images/before/${filepath}"
            after_file="/tmp/modified_images/after/${filepath}"
            mkdir -p "$(dirname "$before_file")"
            mkdir -p "$(dirname "$after_file")"
            cp "$base_file" "$before_file"
            cp "$head_file" "$after_file"
          done
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vrt_result
          path: |
            /tmp/result_comment.md
            /tmp/modified_images
          # Set a longer value for later use in the review workflow
          retention-days: 30
